datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String          @id @default(cuid())
  name      String
  email     String          @unique
  admin     Boolean         @default(false)
  password  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  sessions  Session[]
  council   StudentCouncil? @relation(fields: [councilId], references: [id])
  councilId String?
  File      File[]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model StudentCouncil {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  school    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
  logo      File?    @relation(fields: [logoId], references: [id])
  logoId    String?  @unique

  // docker info
  dockerNetwork String
  containers    DockerContainer[]
}

model File {
  id           String          @id @default(cuid())
  filename     String
  mimetype     String
  size         Int
  path         String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  uploadedBy   User?           @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  council      StudentCouncil?
}

model DockerContainer {
  id           String          @id @default(cuid())
  name         String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  council      StudentCouncil? @relation(fields: [councilId], references: [id])
  councilId    String?
  image        String
  containerId  String
  directory    String?
  envVariables Json            @default("{}")

  isWebsite  Boolean
  isDatabase Boolean
}
